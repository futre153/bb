package org.pabk.basen.asn1.chrs;

import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.util.BitSet;

public class T61StrCharset extends Charset {

	private static final long[] LONG = {0xffffffe7ffffffffL,0x97fffffeafffffffL,0xf9ff0bffffffffffL,0x7fffffdf0000fdfeL};
	private static final BitSet charset = BitSet.valueOf(LONG);
	private static int[] MAP = {
			0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,
			0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f,
			0x0020, 0x0021, 0x0022, -0x023, -0x024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,
			0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,
			0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,
			0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005a, 0x005b, -0x05c, 0x005d, -0x05e, 0x005f,
			-0x060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,
			0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007a, -0x07b, 0x007c, -0x07d, -0x07e, 0x007f,
			0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
			0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
			0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x0024, 0x00a5, 0x0023, 0x00a7, 0x00a4, -0x0a9, -0x0aa, 0x00ab, -0x0ac, -0x0ad, -0x0ae, -0x0af,
			0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00d7, 0x00b5, 0x00b6, 0x00b7, 0x00f7, -0x0b9, -0x0ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
			-0x0c0, 0x0300, 0x0301, 0x0302, 0x0303, 0x0304, 0x0306, 0x0307, 0x0308, -0x0c9, 0x030a, 0x0327, 0x0332, 0x030b, 0x0328, 0x030c,
			-0x0d0, -0x0d1, -0x0d2, -0x0d3, -0x0d4, -0x0d5, -0x0d6, -0x0d7, -0x0d8, -0x0d9, -0x0da, -0x0db, -0x0dc, -0x0dd, -0x0de, -0x0df,
			0x2126, 0x00c6, 0x00d0, 0x00aa, 0x0126, -0x0e5, 0x0132, 0x013f, 0x0141, 0x00d8, 0x0152, 0x00ba, 0x00de, 0x0166, 0x014a, 0x0149,
			0x0138, 0x00e6, 0x0111, 0x00f0, 0x0127, 0x0131, 0x0133, 0x0140, 0x0142, 0x00f8, 0x0153, 0x00df, 0x00fe, 0x0167, 0x014b, -0x0ff
	};
	
	protected T61StrCharset() {
		super("teletex-string", new String[]{"t61"});
	}

	@Override
	public boolean contains(Charset arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public CharsetDecoder newDecoder() {
		return new BasenCharDecoder(this, charset, MAP );
	}

	@Override
	public CharsetEncoder newEncoder() {
		return new BasenCharEncoder(this, charset, MAP);
	}
}
